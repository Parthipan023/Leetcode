/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        Stack<TreeNode> first_stack = new Stack<>();
        Stack<TreeNode> second_stack = new Stack<>();
        first_stack.push(p);
        second_stack.push(q);
        while(!first_stack.isEmpty() && !second_stack.isEmpty()){
            TreeNode t1 = first_stack.pop();
            TreeNode t2 = second_stack.pop();
            if(t1 == null && t2 == null) continue;
            if(t1 == null || t2 == null) return false;
            if(t1.val != t2.val) return false;
            first_stack.push(t1.left);
            first_stack.push(t1.right);
            second_stack.push(t2.left);
            second_stack.push(t2.right);
        }
        if(first_stack.isEmpty() && second_stack.isEmpty()) return true;
        else return false;
    }
}